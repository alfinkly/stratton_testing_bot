import asyncio
import datetime
import logging

import coloredlogs
import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.enums import ParseMode
import callback_router
import config
import keyboards
import routers
from config import TOKEN, con
from factories import IsCompleteCallbackFactory, TimeCallbackFactory
from methods import send_testing_message_callback

bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.include_routers(routers.router, callback_router.router)
coloredlogs.install()


# cursor = con.cursor(buffered=True)


@dp.callback_query(IsCompleteCallbackFactory.filter(F.action == "isComplete"))
async def times(callback: types.CallbackQuery, callback_data: IsCompleteCallbackFactory):
    con.reconnect()
    if callback_data.from_who == 0:
        if callback_data.is_complete == 0:
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
        elif callback_data.is_complete == 1:
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
            await send_testing_message_callback(callback, to_complete=True)
            for c_id in config.checker_ids:
                await callback.message.send_copy(c_id, reply_markup=keyboards.
                                                 keyboard_is_exam_complete(from_who=1, sender=callback.from_user.id))
            cursor = con.cursor(buffered=True)
            cursor.execute("UPDATE users_data SET test_status=%s WHERE user_id=%s", (4, callback.from_user.id))
            con.commit()
            cursor.close()
    elif callback_data.from_who == 1:
        if callback_data.is_complete == 0:
            await callback.message.answer(text=f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ @{callback.from_user.username} ‚ùå")
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
            await bot.send_message(callback_data.sender, text=f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ‚ùå",
                                   reply_markup=keyboards.main_actions(callback.from_user.id,
                                                                       callback.from_user.username))
        elif callback_data.is_complete == 1:
            await callback.message.answer(text=f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ @{callback.from_user.username} ‚úÖ")
            await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
            await bot.send_message(callback_data.sender, text=f"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ
<a href='https://t.me/+9FMpM6obgMQ3MmYy'>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å—Ç–∞–∂–µ—Ä–æ–≤</a>""",
                                   reply_markup=keyboards.main_actions(callback.from_user.id,
                                                                       callback.from_user.username),
                                   parse_mode=ParseMode.HTML)
            await bot.send_message(callback_data.sender, text="""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –≥—Ä—É–ø–ø–µ Stratton Python Interns
–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –Ω–∞–ø–∏—Å–∞–≤ –ò–º—è, –ì–æ—Ä–æ–¥ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ —Å–≤–æ–∏ —Å–∫–∏–ª–ª—ã –∏ —É–≤–ª–µ—á–µ–Ω–∏—è!
–° –≤–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏:
–ê–¥–∏–ª @crepecafe - PM –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ú–∏—Ö–∞–∏–ª @M1khal1 - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Python

–ì—Ä—É–ø–ø–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º—å—é–Ω–∏—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è –ø–æ —Ç–µ–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ—Å–∏—Ç—å —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–º–æ—â–∏ –≤  —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–æ–≤, —Å–æ–≤–µ—Ç–æ–≤.

‚ö†Ô∏è–ü—Ä–∞–≤–∏–ª–∞:
‚ùóÔ∏è1. –ü–∏—à–µ–º –Ω–∞ Aiogram 3;
‚ùóÔ∏è2. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å! –ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ó–ê–ü–£–©–ï–ù–ù–û–ì–û –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞;
‚ùóÔ∏è3. –°–æ–±–ª—é–¥–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç "–ø—Ä–∏–Ω—è—Ç–æ" ‚úÖ!
‚ùóÔ∏è4. –§–ª—É–¥ –∑–∞–ø—Ä–µ—â–µ–Ω! ‚õîÔ∏è
–í–æ—Ç —Ç–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–∏—Å–∞—Ç—å! ‚ùåüëáüèø
–∏–ª–∏ —á–µ—Ä–µ–∑
–∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
Win + R
—Ç—É–¥–∞ cmd
–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É —Ñ–∞–π–ª—É
–∫ –º–µ–π–Ω—É
–∏–ª–∏ –∫ –ø–∏—Ç–æ–Ω—É
–Ω–∞–ø—Ä—è–º—É—é
‚ùóÔ∏è5. –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º <a href="https://docs.google.com/document/d/1JDWAFRgLbI76j60YnF0-PhxmZPe_WBdQfq6xaBlC_kg/edit">—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º</a> –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–æ–≤!
6. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–ó–∞–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É! –ù–∞–ø–∏—à–∏—Ç–µ, –ª–µ–≥—á–µ –∏–ª–∏ —Å–ª–æ–∂–Ω–µ–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ª–æ–∫–∞–ª–∫–µ c—Ç–∞–∂–µ—Ä—É –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–æ—Ç–æ–≤! –ú—ã —Å–∞–º–∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º!

–í—Å–µ–º —É—Å–ø–µ—à–Ω–æ–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ —Å–∫–æ—Ä–µ–π—à–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—É—é (–±–æ–µ–≤—É—é) –∫–æ–º–∞–Ω–¥—É!""", parse_mode=ParseMode.HTML)
            await send_testing_message_callback(callback, to_complete=True)
    await callback.answer()


@dp.callback_query(TimeCallbackFactory.filter(F.action == "times"))
async def times(callback: types.CallbackQuery, callback_data: TimeCallbackFactory):
    con.reconnect()
    return_keyboard = keyboards.get_times(callback)
    correct_time = f"{callback_data.hour}:{callback_data.minute}0"
    # correct_time = f"20:24"
    user_config = (correct_time, callback.from_user.id)
    cursor = con.cursor(buffered=True)
    cursor.execute("UPDATE users_data SET time=%s WHERE user_id=%s", user_config)
    con.commit()
    for row in range(len(callback.message.reply_markup.inline_keyboard)):
        for data in range(len(callback.message.reply_markup.inline_keyboard[row])):
            if callback.message.reply_markup.inline_keyboard[row][data].text == \
                    f"{callback_data.hour}:{callback_data.minute}0":
                cursor.execute("UPDATE users_data SET time=%s, test_status=1 WHERE user_id=%s",
                               (f"{callback_data.hour}:{callback_data.minute}0", callback.from_user.id))
                con.commit()
                cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {callback.from_user.id}")
                row_db = cursor.fetchall()
                if row_db != [] and row_db[0][0] is not None and row_db[0][1] is not None:
                    date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1],
                                                         '%Y-%m-%d %H:%M')
                else:
                    return callback.message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                if config.DEV_MODE:
                    date_now = datetime.datetime.now(tz=pytz.FixedOffset(300))
                    date_to = datetime.datetime(year=date_now.year, month=date_now.month, day=date_now.day,
                                                hour=date_now.hour, minute=date_now.minute)
                    date_to += datetime.timedelta(minutes=1)
                    timed = datetime.time(hour=date_to.hour, minute=date_to.minute).strftime("%H:%M")
                    cursor.execute(f"update users_data set date=%s, time=%s"
                                   f" where user_id={callback.from_user.id}",
                                   (date_to, f"{timed}"))
                    con.commit()
                scheduler = AsyncIOScheduler(timezone="Asia/Almaty")
                started_at = datetime.datetime.strptime(
                    datetime.datetime.now(tz=pytz.FixedOffset(300)).strftime("%Y-%m-%d %H:%M"), "%Y-%m-%d "
                                                                                                "%H:%M")
                cursor.execute("UPDATE users_data SET run_date=%s WHERE user_id=%s",
                               (started_at, callback.from_user.id))
                con.commit()
                scheduler.add_job(send_testing_message_callback, trigger='date', run_date=date_to,
                                  kwargs={"callback": callback, "run_date": started_at, "test_status": 2})
                scheduler.add_job(send_testing_message_callback, trigger='date',
                                  run_date=str(date_to + config.exam_times["send_notification"]),
                                  kwargs={"callback": callback, "run_date": started_at, "test_status": 3})
                scheduler.add_job(send_testing_message_callback, trigger='date',
                                  run_date=str(date_to + config.exam_times["duration"]),
                                  kwargs={"callback": callback, "run_date": started_at, "test_status": 5})
                scheduler.start()

                return_keyboard.inline_keyboard[row][data].text = "‚úÖ"
    try:
        await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
        await callback.message.edit_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {callback_data.hour}:{callback_data.minute}0")
    except Exception:
        print("keyboard not modified")
    cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {callback.from_user.id}")
    row_db = cursor.fetchall()
    cursor.close()
    await callback.answer()
    dates = row_db[0][0].split(' ')[0].split('-')
    date = f"{dates[2]}.{dates[1]}.{dates[0]}"
    await callback.message.answer(text="–£—Ä–∞! –í—ã –Ω–∞–∑–Ω–∞—á–∏–ª–∏ —Å–µ–±–µ –∑–∞–¥–∞–Ω–∏–µ! üôÇ"
                                       "\n"
                                       f"\n–î–∞—Ç–∞: {date}"
                                       f"\n–í—Ä–µ–º—è: {row_db[0][1]}"
                                       "\n–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: 4 —á–∞—Å–∞"
                                       "\n"
                                       "\n–¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ üôÇ",
                                  reply_markup=keyboards.main_actions(user_id=callback.from_user.id,
                                                                      username=callback.from_user.username,
                                                                      add_remove_exam=
                                                                      routers.exist_datetime(callback.from_user.id)))
    for c_id in config.checker_ids:
        await bot.send_message(chat_id=c_id, text=f"@{callback.from_user.username} {callback.from_user.full_name}"
                                                  f"\n"
                                                  f"–∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
                                                  f"\n"
                                                  f"\n–î–∞—Ç–∞: {date}"
                                                  f"\n–í—Ä–µ–º—è: {row_db[0][1]}")


@dp.callback_query(F.data == "on_task")
async def month(callback: types.CallbackQuery):
    con.reconnect()
    await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[]))
    for c_id in config.checker_ids:
        await bot.send_message(chat_id=c_id, text=f"@{callback.from_user.username} –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    await callback.message.edit_text(text="–í—ã –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚úÖ")
    today = datetime.datetime.now(tz=pytz.FixedOffset(300))
    cursor = con.cursor()
    cursor.execute("UPDATE users_data SET on_task=%s WHERE user_id=%s", (today, callback.from_user.id))
    con.commit()
    cursor.close()
    await callback.answer()


async def start_bot():
    con.reconnect()
    logging.basicConfig(level=logging.DEBUG)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(start_bot())
