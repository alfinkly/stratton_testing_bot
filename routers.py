import datetime
import logging

import coloredlogs
import pytz
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

import config
import keyboards
import methods
from config import con
from methods import exist_datetime

from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto
from NDAService.handlers import GetCheckKeyboard

router = Router()
# con = sqlite3.connect("database.db", timeout=30)
# cursor = con.cursor(buffered=True)
coloredlogs.install()


@router.message(Command("start"))
async def start(message: Message):
    cursor = con.cursor()
    cursor
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
async def start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{message.from_user.username}üôÇü§ùüèº "
        f"\n–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Stratton.kz"
        f"\n–ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ üëá",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info(message: Message):
    await message.answer(f"""üè¨  –ö–æ–º–ø–∞–Ω–∏—è Stratton.kz

ü§ñ –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º —Ä–æ–±–æ—Ç–∏–∑–∞—Ü–∏–∏, –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —á–∞—Ç-–±–æ—Ç–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.

‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ <a href="https://stratton.taplink.ws/p/o-kompanii/">—Ç—É—Ç</a>""",
                         reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                             username=message.from_user.username,
                                                             add_remove_exam=exist_datetime(message.from_user.id)),
                         parse_mode="HTML"
                         )


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def info(message: Message):
    await message.answer(
        f"–î–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è"
        f"\n@alfinkly",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def info(message: Message):
    if methods.get_test_status(message.from_user.id, message.from_user.username) in [1, None]:
        today = datetime.datetime.now(tz=pytz.FixedOffset(300))
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É: üìÖ",
            reply_markup=keyboards.get_calendar(today.year, today.month, message)
        )
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3, 4]:
        await message.answer("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—á–∞–≤—à–µ–µ—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. ‚ùå")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [5, 6]:
        await message.answer(
            f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ."
            f"\n"
            f"\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–µ—Ä–µ—Å–¥–∞—á–∏ –ø–∏—à–∏—Ç–µ ‚úçÔ∏è"
            f"\n@alfinkly"
        )


@router.message(F.text == "–Æ—Ö—É")
async def info(message: Message):
    await message.answer(
        f"–Æ—Ö—É—É—É",
        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                            username=message.from_user.username,
                                            add_remove_exam=exist_datetime(message.from_user.id))
    )


@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def add_remove_exam(message: Message):
    try:
        if methods.get_test_status(message.from_user.id, message.from_user.username) == 1:
            cursor = con.cursor(buffered=True)
            cursor.execute(f"UPDATE users_data SET date=NULL, time=NULL, test_status=NULL "
                           f"WHERE user_id={message.from_user.id}")
            con.commit()
            cursor.close()
            return await message.answer(text="–í–∞—à–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. ‚ùå",
                                        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                            username=message.from_user.username,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
        elif methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3, 4]:
            return await message.answer(text="–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–≤—à–µ–µ—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. ‚ùå",
                                        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                            username=message.from_user.username,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
        elif methods.get_test_status(message.from_user.id, message.from_user.username) in [5, 6]:
            return await message.answer(text="–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. ‚ùå",
                                        reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                            username=message.from_user.username,
                                                                            add_remove_exam=exist_datetime(
                                                                                message.from_user.id)))
    except Exception:
        return await message.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
                                    reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                        username=message.from_user.username,
                                                                        add_remove_exam=exist_datetime(
                                                                            message.from_user.id)))


@router.message(Command("remake"))
async def start(message: Message):
    try:
        if config.DEV_MODE:
            cursor = con.cursor(buffered=True)
            cursor.execute(f"DELETE FROM users_data")
            con.commit()
            cursor.close()
            logging.info("DB remaked")
            await message.answer(text="–ê–ù–ò–ì–ò–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê",
                                 reply_markup=keyboards.main_actions(user_id=message.from_user.id,
                                                                     username=message.from_user.username,
                                                                     add_remove_exam=exist_datetime(
                                                                         message.from_user.id)))
    except Exception:
        logging.error("Remake error")


@router.message(F.video)
async def video(message: Message):
    if methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3]:
        cursor = con.cursor(buffered=True)
        cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {message.from_user.id}")
        row_db = cursor.fetchall()
        date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1], '%Y-%m-%d %H:%M')
        date_to = pytz.timezone('Asia/Almaty').localize(date_to)
        now = datetime.datetime.now(tz=pytz.timezone('Asia/Almaty'))
        video_format = message.video.mime_type.lower()
        if message.video.duration > 60:
            return await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥. üïó")
        if message.video.file_size > 10485760:  # 10 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
            return await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –≤–µ—Å–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10–ú–ë. üíæ")
        if not (video_format in ["video/mp4", "video/quicktime"]):
            return await message.reply(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mov –∏–ª–∏ .mp4 ")
        if date_to < now < date_to + config.exam_times["duration"]:
            cursor.execute(f"SELECT tasks FROM users_data WHERE user_id={message.from_user.id}")
            tasks_text = cursor.fetchone()
            await message.answer_video(video=message.video.file_id,
                                       reply_markup=keyboards.keyboard_is_exam_complete(from_who=0,
                                                                                        sender=message.from_user.id),
                                       caption=f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ @{message.from_user.username}"
                                               f"\n\n–ó–∞–¥–∞–Ω–∏–µ: \n"
                                               f"{tasks_text[0]}\n\n"
                                       )
            con.commit()
            cursor.close()
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [5, 6]:
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –≤ —Å—Ä–æ–∫! ‚åõÔ∏è")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) == 4:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! ‚ùå")


@router.message(F.text)
async def format_time(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get('change'):
        text = data['text'].split('\n')
        for i in range(len(text)):
            asd = text[i].split('-')
            if asd[0]==data['change']:
                text[i] = f"{asd[0]}-{message.text}"
                break
        text='\n'.join(text)
        await state.update_data(text=text)
    
        media = []
        photoPaths = [data['fImageId'], data['sImageId']]
        for path in photoPaths:
            media.append(InputMediaPhoto(media=path))
        await message.answer_media_group(media=media)
        await message.answer(text, reply_markup=GetCheckKeyboard())

    # dokuzunosaiduowari

    cursor = con.cursor(buffered=True)
    cursor.execute(f"select test_status from users_data where user_id={message.from_user.id}")
    if methods.get_test_status(message.from_user.id, message.from_user.username) == 1:
        is_time = False
        for time_format in ["%H:%M", "%H %M", "%H-%M", "%H.%M", "%H_%M"]:
            try:
                time = datetime.datetime.strptime(message.text, time_format)
                is_time = True
                await methods.appoint_test(message, time)
                break
            except ValueError:
                pass
        if not is_time:
            await message.answer("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) in [2, 3]:
        if (message.text.startswith("@") and message.text.endswith("bot") and not (" " in message.text)) or \
                (message.text.startswith("https://t.me/") and message.text.endswith("bot") and
                 not (" " in message.text)):
            cursor.execute(f"SELECT date, time FROM users_data WHERE user_id = {message.from_user.id}")
            row_db = cursor.fetchall()
            date_to = datetime.datetime.strptime(row_db[0][0].split(" ")[0] + " " + row_db[0][1], '%Y-%m-%d %H:%M')
            now = datetime.datetime.now(tz=pytz.FixedOffset(300))
            if date_to < now < date_to + config.exam_times["duration"]:  # or config.DEV_MODE:
                await message.send_copy(message.from_user.id,
                                        reply_markup=keyboards.keyboard_is_exam_complete(from_who=0,
                                                                                         sender=message.from_user.id))
        else:
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞.")
    elif methods.get_test_status(message.from_user.id, message.from_user.username) == 4:
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! ‚ùå")
    cursor.close()
